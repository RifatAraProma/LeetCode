class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.length();
        int start = 0;
        int end = 0;
        string output = "";
        
        for (int i = 0; i < len; i++){
            int len1 = expandAroundCenter(s, i, i); // for cases like aba
            int len2 = expandAroundCenter(s, i , i + 1); // for cases like abba
            int ans = max(len1, len2);
            if (ans > end - start ){
                start = i - (ans - 1) / 2; // for even length subtracting ans / 2 will result negative
                end = i + (ans / 2);
            }
        }
        
        for (int i = start; i <= end; i++){
            output.push_back(s[i]);
        }
        
        return output;
    }
    
    int expandAroundCenter (string s, int start, int end){
        int left = start;
        int right = end;
        
        while (left >= 0 && right < s.length() && s[left] == s[right]){
            left--;
            right++;
        }
        
        return (right - 1) - (left + 1) + 1; // as right is increased by one to point to the next char which does not satisfy the condition. same for left.  we add 1 in the end as if left and right both are pointing the same char, the length should be 1
    }
};
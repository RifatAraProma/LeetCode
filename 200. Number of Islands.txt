class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        bool visited[301][301] = {false};
        int island = 0;
        int row = grid.size();
        int col = grid[0].size();

        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                if (grid[i][j] == '1' && !visited[i][j]){
                    island++;
                    queue<pair<int, int>> bfsQ;
                    bfsQ.push({i,j});
                    visited[i][j] = true;
                    while (!bfsQ.empty()){
                        pair<int, int>curr = bfsQ.front();
                        bfsQ.pop();
                        int r = curr.first, c = curr.second;

                        if (r - 1 >= 0 && grid[r-1][c] =='1' && !visited[r-1][c]){
                            bfsQ.push({r-1, c});
                            visited[r-1][c] = true;
                        }
                        if (r + 1 < row && grid[r+1][c] =='1' && !visited[r+1][c]){
                            bfsQ.push({r+1, c});
                            visited[r+1][c] = true;
                        }
                        if (c - 1 >= 0 && grid[r][c - 1] =='1' && !visited[r][c-1]){
                            bfsQ.push({r, c-1});
                            visited[r][c-1] = true;
                        }
                        if (c + 1 < col && grid[r][c + 1] =='1' && !visited[r][c+1]){
                            bfsQ.push({r, c+1});
                            visited[r][c+1] = true;
                        }
                    }
                }
            }
        }
        
        return island;
        
    }
};
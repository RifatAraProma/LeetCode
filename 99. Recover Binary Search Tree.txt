/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        vector<int>nums;
        inOrderTrav(root, nums);
        sort(nums.begin(), nums.end());
        int index =  0;
        assignRightVal(root, nums, index);
    }
    
    void assignRightVal(TreeNode* root, vector<int>&nums, int &index){
        if(root == NULL) return;
        assignRightVal(root->left, nums, index);
        root->val = nums[index];
        index++;
        assignRightVal(root->right, nums, index);
    }
    
    void inOrderTrav(TreeNode* root, vector<int>&sortedList ){
        if(root == NULL) return;
        inOrderTrav(root->left, sortedList);
        sortedList.push_back(root->val);
        inOrderTrav(root->right, sortedList);
    }
};
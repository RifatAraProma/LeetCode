/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        queue<TreeNode*> bfsQ;
        bfsQ.push(root);
        bfsQ.push(root);
        
        while(!bfsQ.empty()){
            TreeNode* curr1 = bfsQ.front();
            bfsQ.pop();
            TreeNode* curr2 = bfsQ.front();
            bfsQ.pop();
            
            if(curr1 == NULL && curr2 == NULL ) continue;
            else if (curr1 == NULL || curr2 == NULL) return false;
            else if(curr1->val != curr2->val) return false;
            
            bfsQ.push(curr1->left);
            bfsQ.push(curr2->right);
            bfsQ.push(curr1->right);
            bfsQ.push(curr2->left);
        }
        
       return true;
    }
      
};
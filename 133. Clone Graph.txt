/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (node == NULL) return NULL;
    
        Node* root = new Node(node->val);
        cloneBFS(node, root);
        
        return root;
    }
    
    void cloneBFS(Node* node, Node* root){
        queue<Node*> bfsQ;
        map<int, Node*> nodeMap;
        vector<bool>visited(101);
        
        bfsQ.push(node);
        nodeMap[root->val] = root;
        
        visited[node->val] = true;
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();

            for (auto child : curr->neighbors){
                if(!visited[child->val]){
                    visited[child->val] = true;
                    bfsQ.push(child);
                }
                Node* cloneChild;

                if (nodeMap.find(child->val) == nodeMap.end()){
                    cloneChild =  new Node(child->val);
                    nodeMap[child->val] = cloneChild;
                }
                else 
                    cloneChild = nodeMap[child->val];

                nodeMap[curr->val]->neighbors.push_back(cloneChild);
            }
        }
    }
};
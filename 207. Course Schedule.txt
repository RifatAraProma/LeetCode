class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> edges(numCourses + 1);
        vector<int> inDegree(numCourses + 1);
        
        for (auto course : prerequisites){
            int req = course[1];
            int dep = course[0];
            edges[req].push_back(dep);
            inDegree[dep]++;
        }
        
        int superNode = numCourses;
        
        for(int i = 0; i < numCourses; i++){
            if (!inDegree[i]){
                inDegree[i]++;
                edges[superNode].push_back(i);
            }
        }
        
        return canFinish(superNode, edges, inDegree, numCourses);
    }
    
    bool canFinish(int src, vector<vector<int>> & edges, vector<int>inDegree, int numCourses){
        vector<int> visited(2001);
        queue<int>bfsQ;
        bfsQ.push(src);
        visited[src]++;
        int courseCounter = 0;
        
        while (!bfsQ.empty()){
            int curr = bfsQ.front();
            bfsQ.pop();
            int len = edges[curr].size();
            
            for(int i = 0; i < len; i++){
                int course = edges[curr][i];
                visited[course]++;
                if(visited[course] == inDegree[course]){
                    bfsQ.push(course);
                    courseCounter++;
                }
            }
            
        }
        
        return courseCounter == numCourses;
    }
};
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<int>>graph(101);
        map<pair<int, int>, int>cost;
        vector<int>minCost(101);
        
        for(int i = 0; i < 101; i++){
            minCost[i] = INT_MAX;
        }
        
        for(auto flight : flights){
            int from = flight[0];
            int to = flight[1];
            int price = flight[2];
            graph[from].push_back(to);
            cost[{from, to}] = price;
        }

        dijkstra(graph, minCost, cost, src, k);
       
        return minCost[dst] == INT_MAX ? -1 : minCost[dst];
    }
    
    void dijkstra(vector<vector<int>> &graph, vector<int>&minCost, map<pair<int, int>, int >&cost, int src, int k){
        
        priority_queue<pair<int, pair<int, int> > >dijQ;
        dijQ.push({0, {0, src}});
        minCost[src] = 0;
        
        while(!dijQ.empty()){
            auto curr = dijQ.top();
            dijQ.pop();
            
            int parent = curr.second.second;
            int parentCost = curr.first;
            int stopsSoFar = curr.second.first;
            
            for(auto child : graph[parent]){

                if(minCost[child] > parentCost + cost[{parent, child}] && stopsSoFar <= k){
                    
                    minCost[child] = parentCost + cost[{parent, child}];
                    dijQ.push({minCost[child], {stopsSoFar + 1, child } } );
                    
                }
            }                        
        }
    
    }
    
    
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        auto traversal = BFS(root);
        int len = traversal.size();
        
        for(int i  = 1; i < len; i+= 2){
            reverse(traversal[i].begin(), traversal[i].end());
        }
        
        return traversal;
    }
    
    vector<vector<int>> BFS(TreeNode* root){
        vector<vector<int>>traversal;
        if(root == NULL) return traversal;
        queue<TreeNode*>bfsQ;
        map<TreeNode*, int>level;
        bfsQ.push(root);
        level[root] = 0;
        vector<int>levelWiseNode;
        int lvl = 0;
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            if(lvl != level[curr]){
                lvl = level[curr];
                traversal.push_back(levelWiseNode);
                levelWiseNode.clear();
            }
            levelWiseNode.push_back(curr->val);
            if(curr->left){
                bfsQ.push(curr->left);
                level[curr->left] = level[curr] + 1;
            }
            if(curr->right){
                bfsQ.push(curr->right);
                level[curr->right] = level[curr] + 1;
            }
        }
        
        traversal.push_back(levelWiseNode);
        
        return traversal;
    }
};
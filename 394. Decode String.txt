class Solution {
public:
    string decodeString(string s) {
        int len = s.length();
        stack<char>st;
        string ans = "";
        string subS = "";
        int ending = 0;
        int num = 0;
        for(int i  = 0; i < len; i++){
            if(s[i] != ']'){
                st.push(s[i]); 
                continue;
            }
            subS = "";
            while(!st.empty() && st.top() != '['){
                subS.push_back(st.top());
                st.pop();
            }
            st.pop();
            
            vector<int>digits;
            while(!st.empty() && st.top() >='0' && st.top() <= '9'){
                digits.push_back(st.top() - 48);
                st.pop();
            }
            int freq = 0;
            int digLen = digits.size();
            for(int j  = digLen - 1; j >= 0; j--){
                freq = freq*10 + digits[j];
            }
            
            while(freq > 0){
                freq--;
                int lenS = subS.length();
                for(int j = lenS - 1; j >= 0; j--)
                    st.push(subS[j]);
            }
        }
        
        while(!st.empty()){
            auto curr = st.top();
            st.pop();
            ans.push_back(curr);
        }

        reverse(ans.begin(), ans.end());
        
        return ans;
    }
    

};
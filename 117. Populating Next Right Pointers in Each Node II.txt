/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if (!root) return NULL;
            
        vector<vector<Node*>>nodeListByLevel(101);
        bfs(root, nodeListByLevel);
        
        for(int i = 0; i < 100; i++){
            int len = nodeListByLevel[i].size();
            if (!len) break;
            
            Node* parent = nodeListByLevel[i][0];
            for (int j = 1; j < len; j++){
                Node* child = nodeListByLevel[i][j];
                parent->next = child;
                parent = child;
            }
            parent->next = NULL;
        }
        
        return root;
    }
    
    void bfs(Node* root, vector<vector<Node*>>&nodeListByLevel){
        queue<Node*>bfsQ;
        map<Node*, int> levelMap;
        bfsQ.push(root);
        nodeListByLevel[0].push_back(root);
        levelMap[root] = 0;
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            
            if(curr->left){
                nodeListByLevel[levelMap[curr] + 1].push_back(curr->left);
                levelMap[curr->left] = levelMap[curr] + 1;
                bfsQ.push(curr->left);
            }
            
            if(curr->right){
                nodeListByLevel[levelMap[curr] + 1].push_back(curr->right);
                levelMap[curr->right] = levelMap[curr] + 1;
                bfsQ.push(curr->right);
            }
        }
    }
};
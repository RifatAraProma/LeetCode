/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if (!root) return NULL;
        
        bfs(root);
        
        return root;
    }
    
    void bfs(Node* root){
        queue<Node*>bfsQ;
        bfsQ.push(root);
        
        while(!bfsQ.empty()){
            int len = bfsQ.size();
            
            for(int i = 0; i < len; i++){
                auto curr = bfsQ.front();
                bfsQ.pop();
                
                if(i != len - 1){
                    curr->next = bfsQ.front();
                }
                
                if(curr->left) bfsQ.push(curr->left);
                if(curr->right) bfsQ.push(curr->right);
            }
        }
    }
};
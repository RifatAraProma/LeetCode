/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        int maxWidth = bfsMaxWidth(root);
                
        return maxWidth;
    }
    
    int bfsMaxWidth(TreeNode* root){
        queue<pair<TreeNode*, unsigned long long>>bfsQ;
        unsigned long long maxWidth = 1;
        
        bfsQ.push({root, 0});        
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            
            int len = bfsQ.size();
            pair<TreeNode*, unsigned long long> endElement;
            
            for(int i = 0; i < len; i++){
                endElement = bfsQ.front();
                bfsQ.pop();
                auto node = endElement.first;

                
                if(node->left){
                    bfsQ.push({node->left, endElement.second * 2} );
                }
                if(node->right){
                     bfsQ.push({node->right, endElement.second * 2 + 1});
                }
            }
            
            maxWidth = max(maxWidth, endElement.second - curr.second + 1);
        }
        
        return maxWidth;
        
    }
};
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if (!root) return NULL;
        
        bfs(root);
        
        return root;
    }
    
    void bfs(Node* root){
        queue<Node*>bfsQ;
        bfsQ.push(root);
        Node* rightMost = root;
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            
            if(rightMost != curr && curr->next == NULL){
                curr->next = bfsQ.front();
            }

            if(curr->left){
                 bfsQ.push(curr->left);
                curr->left->next = curr->right;
            }
            if(curr->right){
                bfsQ.push(curr->right);
                if(curr == rightMost){
                    rightMost = curr->right;
                }
            }
        }
    }
};
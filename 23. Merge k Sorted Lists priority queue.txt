/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* head = NULL;
        ListNode* prev = new ListNode();
        ListNode* curr = new ListNode();
        int len = lists.size();
        priority_queue<pair<int, ListNode*>> pq;
        
        for(int i = 0; i < len; i++){
            if(lists[i])
                pq.push({-lists[i]->val, lists[i]});
        }
        
        while(!pq.empty()){
            curr = pq.top().second;
            pq.pop();
            
            if(curr->next != NULL)
                pq.push({-curr->next->val, curr->next});

            prev->next = curr;
            prev = curr;
            if(head == NULL) head = curr;
        }
        return head;
    }
};
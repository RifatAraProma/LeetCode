/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = NULL;
        ListNode* digit1 = l1;
        ListNode* digit2 = l2;
        ListNode* curr;
        int carry = 0;
        
        while(digit1 != NULL || digit2 != NULL){
            int a = digit1 == NULL ? 0 : digit1->val;
            int b = digit2 == NULL ? 0 : digit2->val;
            int sum = a + b;
            
            digit1 = digit1 == NULL ? NULL: digit1->next;
            digit2 = digit2 == NULL ? NULL: digit2->next;
            

            if (sum + carry > 9){
                int temp = sum + carry;
                sum =  temp % 10;
                carry = temp / 10;
            }
            else{
                sum += carry;
                carry = 0;
            }
            
            if (head == NULL){
                head = new ListNode(sum);
                curr = head;
            }
            else{
                curr->next = new ListNode(sum);
                curr = curr->next;
            }
            
            
        }
        
        if (carry != 0){
            curr->next = new ListNode(carry);
        }
        
        return head;
        
    }
    
};
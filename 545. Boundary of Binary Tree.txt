/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        vector<int>res;
        map<TreeNode*, bool>visited;
        res.push_back(root->val);
        visited[root] = true;
        if(root->left)
            getLeftBoundary(root->left, res, visited);

        getLeaves(root, res, visited);
        
        if(root->right)
            getRightBoundary(root->right, res, visited);
        
        return res;
    }
    
    void getLeftBoundary(TreeNode* root, vector<int>&res, map<TreeNode*, bool>&visited){
        
        visited[root] = true;
        res.push_back(root->val);
        if(root->left){
            getLeftBoundary(root->left, res, visited);
        }
        else if(root->right){
            getLeftBoundary(root->right, res, visited);
        }
    }
    
    void getLeaves(TreeNode* root, vector<int>&res, map<TreeNode*, bool>&visited){
        if(root->left == NULL && root->right == NULL && visited.find(root) == visited.end()){
            visited[root] = true;
            res.push_back(root->val);
        }
        
        if(root->left){
            getLeaves(root->left, res, visited);
        }
        if(root->right){
            getLeaves(root->right, res, visited);
        }
        
    }
    
    void getRightBoundary(TreeNode* root, vector<int>&res, map<TreeNode*, bool>&visited){
        if(root == NULL) return;
        
        if(root->right){
            getRightBoundary(root->right, res, visited);
        }
        else if(root->left){
            getRightBoundary(root->left, res, visited);
        }
        if(visited.find(root) == visited.end()){
            visited[root] = true;
            res.push_back(root->val);
        }
    }
};
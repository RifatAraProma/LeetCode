/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int pairSum(ListNode* head) {
        int len = calcLen(head);
        ListNode* tail = reverseHalf(head, len);
        
        ListNode* twin1 = head;
        ListNode* twin2 = tail;
        int maxSum = -1;
        
        while(twin1 != NULL && twin2 != NULL){
            maxSum = max(maxSum, twin1->val + twin2->val);
            twin1 = twin1->next;
            twin2 = twin2->next;
        }
        return maxSum;
    }
    
    ListNode* reverseHalf(ListNode* head, int n){
        auto curr = head;
        int counter = 1;
        
        while(counter != n / 2){
            counter++;
            curr = curr->next;
        }
        
        curr = curr->next;
        
        ListNode* prev = NULL;
        ListNode* next;
        
        while(curr != NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;   
        }
        
        return prev;
    }
    
    
    
    int calcLen(ListNode* head){
        auto curr = head;
        int len = 0;
        while(curr != NULL){
            len++;
            curr = curr->next;
        }
        
        return len;
    }
};
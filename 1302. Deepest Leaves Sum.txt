/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        vector<vector<int>>levelNodeList(10001);
        int deepestLevel = bfsDeepestLevel(root, levelNodeList);
        
        int sum = 0;
        for(auto node : levelNodeList[deepestLevel])
            sum += node;
        
        return sum;
    }
    
    int bfsDeepestLevel(TreeNode* root, vector<vector<int>>&levelNodeList){
        queue<TreeNode*>bfsQ;
        map<TreeNode*, int>level;
        bfsQ.push(root);
        level[root] = 0;
        int maxLevel = 0;
        levelNodeList[0].push_back(root->val);
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            int childLevel = level[curr] + 1;
            maxLevel = max(maxLevel, level[curr]);
            
            if(curr->left){
                bfsQ.push(curr->left);
                level[curr->left] = childLevel;
                levelNodeList[childLevel].push_back(curr->left->val);
            }
            
            if(curr->right){
                bfsQ.push(curr->right);
                level[curr->right] = childLevel;
                levelNodeList[childLevel].push_back(curr->right->val);
            }
            
        }
        
        return maxLevel;
    }
};
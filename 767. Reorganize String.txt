class Solution {
public:
    string reorganizeString(string s) {
        vector<int>charCounter(27);
        int len = s.length();
        string res = "";
        priority_queue<pair<int, int>> freqLetter;
        
        for(int i = 0; i < len; i++){
            charCounter[s[i] - 'a']++;
        }
        int maxFreq = 0;
        for(int i = 0; i < 26; i++){
            if(charCounter[i] != 0){
                freqLetter.push({charCounter[i], i});
                maxFreq = max(maxFreq, charCounter[i]);
            }
        }
        
        if(len % 2 != 0) len++;
        if(maxFreq > len / 2) return "";
        
        int lastChar = -1;
        
        while(!freqLetter.empty()){
            auto curr = freqLetter.top();
            if(curr.first == 0) break;
            
            if(lastChar == curr.second){
                freqLetter.pop();
            }
            res.push_back(freqLetter.top().second + 'a');
            auto topVal = freqLetter.top();
            freqLetter.pop();
            freqLetter.push({topVal.first - 1, topVal.second});
            lastChar = topVal.second;
            if(curr.second != topVal.second) freqLetter.push(curr);
        }
        
        return res;
    }
};
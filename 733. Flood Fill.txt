class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        if (image[sr][sc] == color) return image;
        
        BFS(image, sr, sc, color);
        
        return image;
    }
    
    void BFS(vector<vector<int>> & image, int r , int c, int color){
        queue<pair<int, int>> bfsQ;
        int dirX[] = {1, -1, 0, 0};
        int dirY[] = {0, 0, 1, -1};
        int row = image.size();
        int col = image[0].size();
        
        bfsQ.push({r, c});
        int sourceColor = image[r][c];
        image[r][c] = color;
        
        while (!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            
            for (int i  = 0; i < 4; i++){
                int x = curr.first + dirX[i];
                int y = curr.second + dirY[i];
                
                if (isValid(x, y, row, col) && image[x][y] == sourceColor){
                    image[x][y] = color;
                    bfsQ.push({x, y});
                }
            }
        }
        
        return;
    }
    
    bool isValid(int r, int c, int row, int col){
        return r >= 0 && r < row && c >= 0 && c < col;
    }
};
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<int>>graph(n + 1);
        map<pair<int, int>, int>weightMap;
        vector<int>cumulativeWeight;
        
        int len = times.size();
        
        for(int i = 0; i < len; i++){
            int parent = times[i][0];
            int child = times[i][1];
            int w = times[i][2];
            
            graph[parent].push_back(child);
            weightMap[{parent, child}] = w;
        }
        
        for(int i = 0; i <= n; i++){
            cumulativeWeight.push_back(INT_MAX);
        }
        
        dijkstra(graph, weightMap, k, cumulativeWeight);
        
        int ans = -1;
        

        
        for (int i = 1; i <= n; i++){
            ans = max(ans, cumulativeWeight[i]);
        }
        
        return ans == INT_MAX ? -1 : ans;
        
    }
    
    void dijkstra(vector<vector<int>> &graph, map<pair<int, int>, int> &weightMap, int src, vector<int> &cumulativeWeight){
        priority_queue<pair<int, int>> dijQ;
        
        dijQ.push({0, src});
        cumulativeWeight[src] = 0;
        
        while (!dijQ.empty()){
            auto curr = dijQ.top();
            dijQ.pop();
            int parent = curr.second;
            
            for (auto child : graph[parent]){
                if(cumulativeWeight[child] > cumulativeWeight[parent] + weightMap[{parent, child}]){
                    
                    cumulativeWeight[child] =  cumulativeWeight[parent] + weightMap[{parent, child}];
                    dijQ.push({-cumulativeWeight[child], child});
                    
                }     
            }
        }
    }
};
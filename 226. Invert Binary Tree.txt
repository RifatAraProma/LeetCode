/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == NULL) return NULL;
        
        queue<TreeNode*>bfsQ;
        queue<TreeNode*> cloneQ;
        bfsQ.push(root);
        
        TreeNode* cloneRoot = new TreeNode(root->val);
        cloneQ.push(cloneRoot);
        
        while(!bfsQ.empty()){
            auto curr = bfsQ.front();
            bfsQ.pop();
            auto cloneCurr = cloneQ.front();
            cloneQ.pop();
            
            if (curr->left != NULL){
                bfsQ.push(curr->left);
                TreeNode* right = new TreeNode(curr->left->val);
                cloneCurr->right = right;
                cloneQ.push(right);
            }

            
            if (curr->right != NULL){
                bfsQ.push(curr->right);
                TreeNode* left = new TreeNode(curr->right->val);
                cloneCurr->left = left;
                cloneQ.push(left);
            }

        }
        
        return cloneRoot;
    }
};
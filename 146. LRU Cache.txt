class LRUCache {
    class Node{
        Node prev;
        Node next;
        int key;
        int val;
    }
    
    private void addNode(Node node){
        node.prev = head;
        node.next = head.next;
        
        head.next = node;
        node.next.prev = node;
    }
    
    private void removeNode(Node node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    private void moveToHead(Node node){
        removeNode(node);
        addNode(node);
    }
    
    private Node popTail(){
        Node node = tail.prev;
        removeNode(node);
        
        return node;
    }
    
    private Map<Integer, Node>cache = new HashMap<>();
    private int capacity;
    private int size;
    private Node head, tail;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        
        head = new Node();
        tail = new Node();
        
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        Node node = cache.get(key);
        if(node == null) return -1;
        
        moveToHead(node);
        
        return node.val;
    }
    
    public void put(int key, int value) {
        Node node = cache.get(key);
        
        if(node == null){
            Node newNode = new Node();
            
            newNode.key = key;
            newNode.val = value;
            
            cache.put(key, newNode);
            addNode(newNode);
            
            this.size++;
            
            if(this.size > this.capacity){
                Node lruNode = popTail();
                cache.remove(lruNode.key);
                this.size--;
            }
        }
        else{
            node.val = value;
            moveToHead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
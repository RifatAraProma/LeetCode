class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int dirX[] = {0, 1, 0, -1};
        int dirY[] = {1, 0, -1, 0};
        vector<int> ans;
        vector<vector<bool>>visited;
        int row = matrix.size();
        int col = matrix[0].size();
        
        for(int i  = 0; i < row; i++){
            vector<bool>temp(col);
            visited.push_back(temp);
        }
        
        int it = 0;
        int r = 0;
        int c = 0;
        
        while(isValid(r, c, row, col, visited)){
            visited[r][c] = true;
            ans.push_back(matrix[r][c]);
            int x = r + dirX[it];
            int y = c + dirY[it];
            if(isValid(x, y, row, col, visited)){
                r = x; c = y;
            }
            else{
                it = (it + 1) % 4;
                r =  r + dirX[it];
                c  = c + dirY[it];
            }
        }
        
        return ans;
    }
    
    bool isValid(int r, int c, int row, int col, vector<vector<bool>> & visited){
        return r >= 0 && r < row && c >= 0 && c < col && !visited[r][c];
    }
};